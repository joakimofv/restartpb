// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: restart.proto

package restartpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestartClient is the client API for Restart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestartClient interface {
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error)
	Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error)
	Crash(ctx context.Context, in *CrashRequest, opts ...grpc.CallOption) (*CrashResponse, error)
}

type restartClient struct {
	cc grpc.ClientConnInterface
}

func NewRestartClient(cc grpc.ClientConnInterface) RestartClient {
	return &restartClient{cc}
}

func (c *restartClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartResponse, error) {
	out := new(RestartResponse)
	err := c.cc.Invoke(ctx, "/restartpb.Restart/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restartClient) Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error) {
	out := new(TerminateResponse)
	err := c.cc.Invoke(ctx, "/restartpb.Restart/Terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restartClient) Crash(ctx context.Context, in *CrashRequest, opts ...grpc.CallOption) (*CrashResponse, error) {
	out := new(CrashResponse)
	err := c.cc.Invoke(ctx, "/restartpb.Restart/Crash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestartServer is the server API for Restart service.
// All implementations must embed UnimplementedRestartServer
// for forward compatibility
type RestartServer interface {
	Restart(context.Context, *RestartRequest) (*RestartResponse, error)
	Terminate(context.Context, *TerminateRequest) (*TerminateResponse, error)
	Crash(context.Context, *CrashRequest) (*CrashResponse, error)
	mustEmbedUnimplementedRestartServer()
}

// UnimplementedRestartServer must be embedded to have forward compatible implementations.
type UnimplementedRestartServer struct {
}

func (UnimplementedRestartServer) Restart(context.Context, *RestartRequest) (*RestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedRestartServer) Terminate(context.Context, *TerminateRequest) (*TerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedRestartServer) Crash(context.Context, *CrashRequest) (*CrashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crash not implemented")
}
func (UnimplementedRestartServer) mustEmbedUnimplementedRestartServer() {}

// UnsafeRestartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestartServer will
// result in compilation errors.
type UnsafeRestartServer interface {
	mustEmbedUnimplementedRestartServer()
}

func RegisterRestartServer(s grpc.ServiceRegistrar, srv RestartServer) {
	s.RegisterService(&Restart_ServiceDesc, srv)
}

func _Restart_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestartServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restartpb.Restart/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestartServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restart_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestartServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restartpb.Restart/Terminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestartServer).Terminate(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restart_Crash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestartServer).Crash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restartpb.Restart/Crash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestartServer).Crash(ctx, req.(*CrashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Restart_ServiceDesc is the grpc.ServiceDesc for Restart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Restart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restartpb.Restart",
	HandlerType: (*RestartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Restart",
			Handler:    _Restart_Restart_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _Restart_Terminate_Handler,
		},
		{
			MethodName: "Crash",
			Handler:    _Restart_Crash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restart.proto",
}
